---
description: 
globs: 
alwaysApply: false
---
# Epic, Story, Task 상세 기능 요구사항

---

## Epic E-1. 데이터 수집 & 저장

### Story S-1.1: 수동 Fame 스캔 실행 (P0)
- 웹 UI에서 사용자가 원할 때 '새로고침' 버튼을 눌러 데이터를 수집할 수 있도록 한다.
- Fame 구간(40,000 ~ 62,000, 구간 폭 ≤ 10,000)별로 반복적으로 데이터를 수집한다.
- Neople API 호출 시 200개 row씩 페이징 처리한다.

### Story S-1.2: 캐릭터 ↔ Account 매핑 (P0)
- `/characters/:id` 상세 API를 통해 캐릭터 정보를 조회한다.
- accountId 기준으로 캐릭터를 그룹핑한다.
- `account_char` 테이블에 UPSERT(중복 시 갱신)한다.

### Story S-1.3: Sync 오류 리트라이 (P1)
- Axios Retry 및 지수적 백오프(재시도 간격 증가) 적용.
- 실패한 row는 `sync_fail` 테이블에 로그로 남긴다.

---

## Epic E-2. Eligibility 연산

### Story S-2.1: 컨텐츠 Fame 룰 엔진 (P0)
- 컨텐츠별 입장 조건을 JSON 형태의 룰로 구성한다.
- 캐릭터의 Fame이 룰 조건 이상일 경우 Boolean 필드로 계산한다.

### Story S-2.2: 계정별 슬롯 필터 (P0)
- SQL의 `row_number() over(partition by account)`를 활용해 계정별로 캐릭터를 정렬한다.
- 흉몽은 Top 4, 베누스는 Top 1 캐릭터만 남긴다.

### Story S-2.3: Materialized View 반영 (P1)
- eligibility 결과를 담는 `char_eligibility` 뷰를 생성한다.
- Sync 이후 해당 뷰를 `REFRESH`한다.

---

## Epic E-3. API & Backend 서비스

### Story S-3.1: REST endpoint /accounts/:id/eligibles (P0)
- Express Router로 엔드포인트를 구성한다.
- SQL Join을 통해 eligibility 데이터를 JSON으로 응답한다.
- Cache-Control 헤더로 10분 캐싱을 적용한다.

### Story S-3.2: Admin Console routes (P1)
- `/sync/run`, `/sync/logs` 등 운영용 라우트를 제공한다.

---

## Epic E-4. 프론트 UI/UX (SvelteKit + daisyUI)

### Story S-4.1: 계정 대시보드 목록 (P0)
- `AccountSummary` store(SWR)로 데이터 관리.
- daisyUI의 accordion 컴포넌트로 계정별 캐릭터 목록을 표시.
- 최고 Fame 캐릭터에 badge 표시.

### Story S-4.2: 컨텐츠 탭 & 슬롯 뱃지 (P0)
- Raid/Adv/Legion 탭 컴포넌트 구현.
- 입장 가능 여부에 따라 badge 색상 ✓/✕ 표시.
- 슬롯 제한 초과 시 회색 처리.

### Story S-4.3: 검색·필터 바 (P2)
- 계정명, 캐릭명, 직업명으로 필터링 가능한 인풋 제공.

---

## Epic E-5. DevOps & 모니터링

### Story S-5.1: CI/CD 파이프라인 (P0)
- `docker compose build` 및 GitHub Actions → Fly deploy 자동화.

### Story S-5.2: Error & Slack 알림 (P1)
- cron 실패 시 Slack Webhook으로 알림.
- 5xx 에러율 1% 초과 시 경고 알림.
