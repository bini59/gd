---
description: 
globs: 
alwaysApply: false
---
# 백엔드 TDD 테스트 명세 (던파 캐릭터 분류·컨텐츠 추천)

---

## Epic E-1. 데이터 수집 & 저장

### Story S-1.1: 수동 Fame 스캔 실행 (P0)

**테스트 목록**
1. **수동 Fame 스캔 API 호출 시 정상적으로 데이터가 수집되는가**
   - [ ] 새로고침(수동 Sync) API 호출 시, 외부 Neople API에서 데이터를 받아오는지
   - [ ] Fame 구간(40,000~62,000, 구간폭 ≤ 10,000)별로 반복 호출이 이루어지는지
   - [ ] 호출당 200개 row씩 페이징이 정상 동작하는지
2. **수집된 데이터가 DB에 올바르게 저장되는가**
   - [ ] 기존 데이터와 중복 시 UPSERT(갱신)되는지
   - [ ] 신규 데이터는 정상적으로 추가되는지
3. **API 실패/오류 상황 처리**
   - [ ] 외부 API 실패 시 적절한 에러 응답 및 로그가 남는지
   - [ ] 일부 row 실패 시, 실패 row만 별도 테이블(sync_fail)에 기록되는지
4. **권한/인증**
   - [ ] 인증된 사용자만 수동 Sync API를 호출할 수 있는지

### Story S-1.2: 캐릭터 ↔ Account 매핑 (P0)

**테스트 목록**
1. **캐릭터 상세 API 연동**
   - [ ] `/characters/:id` API 호출 시 올바른 캐릭터 정보가 반환되는지
   - [ ] 잘못된 characterId로 호출 시 적절한 에러가 반환되는지

2. **AccountId 기준 그룹핑**
   - [ ] 여러 캐릭터가 동일 accountId로 올 때, 올바르게 그룹핑되는지
   - [ ] accountId가 없는 데이터는 예외 처리되는지

3. **DB UPSERT 동작**
   - [ ] 기존 account_char 테이블에 동일 캐릭터가 있으면 갱신(UPSERT)되는지
   - [ ] 신규 캐릭터는 정상적으로 추가되는지
   - [ ] DB 트랜잭션이 실패할 경우 롤백되는지

### Story S-1.3: Sync 오류 리트라이 (P1)

**테스트 목록**
1. **Axios Retry 및 백오프**
   - [ ] 외부 API 호출 실패 시, 지정된 횟수만큼 재시도(백오프 포함)가 동작하는지
   - [ ] 재시도 후에도 실패하면 적절히 실패 처리되는지

2. **실패 row 로그 기록**
   - [ ] 실패한 row가 `sync_fail` 테이블에 정확히 기록되는지
   - [ ] 실패 로그에 필요한 정보(에러 메시지, row 데이터 등)가 포함되는지

3. **정상/실패 분기 처리**
   - [ ] 일부 row만 실패해도 전체 Sync가 중단되지 않고, 성공 row는 정상 반영되는지

---

## Epic E-2. Eligibility 연산

### Story S-2.1: 컨텐츠 Fame 룰 엔진 (P0)

**테스트 목록**
1. **룰 JSON 구성 및 파싱**
   - [ ] 컨텐츠별 입장 조건이 JSON으로 올바르게 정의·파싱되는지
   - [ ] 잘못된 JSON 입력 시 예외가 발생하는지

2. **Fame 조건 연산**
   - [ ] 캐릭터의 Fame이 룰 조건 이상일 때 eligibility가 true로 계산되는지
   - [ ] Fame이 부족할 때 eligibility가 false로 계산되는지
   - [ ] 경계값(=조건값)에서 올바르게 처리되는지

3. **컨텐츠별 Boolean 필드 생성**
   - [ ] 각 컨텐츠별로 eligibility Boolean 필드가 정확히 생성되는지
   - [ ] 여러 컨텐츠 룰이 동시에 적용될 때 각각 올바르게 연산되는지

### Story S-2.2: 계정별 슬롯 필터 (P0)

**테스트 목록**
1. **SQL row_number 파티셔닝**
   - [ ] accountId별로 캐릭터가 올바르게 정렬되는지
   - [ ] 동일 account 내에서 명성 순으로 정렬되는지

2. **슬롯 제한 적용**
   - [ ] 흉몽 컨텐츠는 Top 4 캐릭터만 남기는지
   - [ ] 베누스 컨텐츠는 Top 1 캐릭터만 남기는지
   - [ ] 슬롯 초과 캐릭터는 필터링(제외)되는지

3. **예외 처리**
   - [ ] 캐릭터 수가 슬롯 제한보다 적을 때도 정상 동작하는지

### Story S-2.3: Materialized View 반영 (P1)

**테스트 목록**
1. **뷰 생성 및 갱신**
   - [ ] `char_eligibility` 뷰가 정상적으로 생성되는지
   - [ ] 데이터 Sync 이후 뷰가 정상적으로 REFRESH되는지

2. **뷰 데이터 정확성**
   - [ ] 뷰의 데이터가 실제 eligibility 연산 결과와 일치하는지
   - [ ] 뷰 갱신 후에도 데이터 정합성이 유지되는지

3. **에러/예외 처리**
   - [ ] 뷰 생성/갱신 중 에러 발생 시 적절히 예외 처리되는지

---

## Epic E-3. API & Backend 서비스

### Story S-3.1: REST endpoint /accounts/:id/eligibles (P0)

**테스트 목록**
1. **엔드포인트 정상 동작**
   - [ ] `/accounts/:id/eligibles` API 호출 시 해당 계정의 eligibility 데이터가 정상적으로 반환되는지
   - [ ] 존재하지 않는 accountId로 호출 시 404 또는 적절한 에러가 반환되는지

2. **SQL Join 및 데이터 정합성**
   - [ ] eligibility 데이터가 account, character, 컨텐츠 정보와 올바르게 Join되어 반환되는지
   - [ ] 반환되는 JSON 구조가 명세와 일치하는지

3. **캐싱 동작**
   - [ ] Cache-Control 헤더가 10분(600초)으로 설정되어 있는지
   - [ ] 캐시 만료 후 재요청 시 데이터가 갱신되는지

4. **권한/인증**
   - [ ] 인증된 사용자만 해당 API를 호출할 수 있는지

### Story S-3.2: Admin Console routes (P1)

**테스트 목록**
1. **/sync/run 엔드포인트**
   - [ ] `/sync/run` 호출 시 수동 데이터 Sync가 정상적으로 트리거되는지
   - [ ] Sync 실행 중 중복 실행 방지(동시 실행 제한)가 되는지
   - [ ] 실행 결과(성공/실패)가 올바르게 반환되는지

2. **/sync/logs 엔드포인트**
   - [ ] `/sync/logs` 호출 시 최근 Sync 로그가 정상적으로 반환되는지
   - [ ] 실패 row, 성공 row 등 로그 데이터가 명세대로 포함되는지

3. **권한/인증**
   - [ ] 운영자 권한이 있는 사용자만 Admin Console API를 호출할 수 있는지

---

## Epic E-4. 프론트 UI/UX (백엔드 연관 부분)

### Story S-4.1: 계정 대시보드 목록 (P0) - 백엔드 API 테스트

**테스트 목록**
1. **AccountSummary API 응답**
   - [ ] 계정 목록 API가 올바른 JSON 구조로 응답하는지
   - [ ] 각 계정의 최고 Fame 캐릭터 정보가 포함되는지
   - [ ] SWR 캐싱을 위한 적절한 HTTP 헤더가 설정되는지

2. **데이터 정렬 및 필터링**
   - [ ] 계정별 캐릭터가 명성 순으로 정렬되어 반환되는지
   - [ ] 빈 계정(캐릭터 없음)도 적절히 처리되는지

### Story S-4.2: 컨텐츠 탭 & 슬롯 뱃지 (P0) - 백엔드 API 테스트

**테스트 목록**
1. **컨텐츠별 데이터 분류**
   - [ ] Raid/Adv/Legion 등 컨텐츠별로 데이터가 올바르게 분류되어 반환되는지
   - [ ] 슬롯 제한 정보(예: 흉몽 3/4)가 API 응답에 포함되는지

2. **뱃지 상태 계산**
   - [ ] 입장 가능/불가 상태가 Boolean으로 정확히 계산되는지
   - [ ] 슬롯 초과 시 회색 처리를 위한 플래그가 포함되는지

---

## Epic E-5. DevOps & 모니터링

### Story S-5.1: CI/CD 파이프라인 (P0) - 백엔드 테스트

**테스트 목록**
1. **Docker 빌드 테스트**
   - [ ] `docker compose build` 시 백엔드 서버가 정상적으로 빌드되는지
   - [ ] 환경변수(API Key 등)가 올바르게 주입되는지

2. **배포 후 Health Check**
   - [ ] 배포 후 `/health` 엔드포인트가 정상 응답하는지
   - [ ] DB 연결 상태가 정상인지 확인하는 테스트

### Story S-5.2: Error & Slack 알림 (P1) - 백엔드 테스트

**테스트 목록**
1. **Slack Webhook 알림**
   - [ ] cron 실패 시 Slack Webhook이 정상적으로 호출되는지
   - [ ] 알림 메시지에 필요한 정보(실패 시간, 에러 내용 등)가 포함되는지

2. **에러율 모니터링**
   - [ ] 5xx 에러 발생 시 로그가 정상적으로 기록되는지
   - [ ] 에러율 1% 초과 시 경고 알림이 트리거되는지

3. **로깅 시스템**
   - [ ] 모든 API 호출이 적절한 로그 레벨로 기록되는지
   - [ ] 에러 로그에 스택 트레이스와 컨텍스트 정보가 포함되는지

---

## 추가 통합 테스트

### 전체 플로우 테스트
1. **End-to-End 데이터 플로우**
   - [ ] 수동 Sync → Eligibility 연산 → API 응답까지 전체 플로우가 정상 동작하는지
   - [ ] 외부 API 장애 시에도 시스템이 안정적으로 동작하는지

2. **성능 테스트**
   - [ ] 계정 20개(캐릭터 240개) 조회 시 1초 이내 응답하는지
   - [ ] 동시 사용자 접근 시 성능이 유지되는지

---

## 테스트 실행 가이드

### 테스트 환경 설정
- Node.js 테스트 프레임워크: Jest 또는 Mocha
- DB 테스트: 테스트용 PostgreSQL 인스턴스
- 외부 API 모킹: nock 또는 MSW 활용

### 테스트 실행 순서
1. 단위 테스트 (각 Story별)
2. 통합 테스트 (Epic별)
3. End-to-End 테스트
4. 성능 테스트
