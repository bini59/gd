---
description: 
globs: 
alwaysApply: false
---
# Backend PRD (던파 캐릭터 분류·컨텐츠 추천)

## 1. 기술 스택 & 아키텍처

### 1.1. 핵심 기술
- **Runtime**: Node.js 20
- **Framework**: Express.js
- **Database**: PostgreSQL (Supabase)
- **ORM/Query**: Raw SQL + Connection Pool
- **HTTP Client**: Axios (with retry)
- **Authentication**: JWT 또는 API Key 기반
- **Logging**: Winston
- **Testing**: Jest + Supertest

### 1.2. 아키텍처 패턴
- **Layered Architecture**: Controller → Service → Repository
- **TDD 방법론**: 테스트 우선 개발
- **Error Handling**: 중앙집중식 에러 처리
- **Configuration**: 환경변수 기반 설정 관리

---

## 2. 데이터베이스 설계

### 2.1. 핵심 테이블
```sql
-- 계정-캐릭터 매핑 테이블
CREATE TABLE account_char (
    account_id TEXT NOT NULL,
    char_id TEXT NOT NULL,
    fame INTEGER NOT NULL,
    server_id TEXT,
    job_name TEXT,
    updated_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (account_id, char_id)
);

-- Sync 실패 로그 테이블
CREATE TABLE sync_fail (
    id SERIAL PRIMARY KEY,
    char_id TEXT,
    error_message TEXT,
    error_data JSONB,
    failed_at TIMESTAMP DEFAULT NOW()
);

-- Materialized View: 컨텐츠 입장 가능 여부
CREATE MATERIALIZED VIEW char_eligibility AS
SELECT 
    account_id,
    char_id,
    fame,
    job_name,
    -- 컨텐츠별 입장 가능 여부 (Fame 기준)
    (fame >= 50000) AS nabel_eligible,
    (fame >= 45000) AS nightmare_eligible,
    (fame >= 40000) AS goddess_eligible,
    -- 슬롯 제한 적용 (계정별 Top N)
    ROW_NUMBER() OVER (PARTITION BY account_id ORDER BY fame DESC) as rank_in_account
FROM account_char;
```

### 2.2. 인덱스 전략
- `account_char(account_id, fame DESC)`: 계정별 명성 정렬
- `account_char(fame)`: Fame 구간 검색
- `sync_fail(failed_at)`: 실패 로그 시간순 조회

---

## 3. API 명세

### 3.1. 데이터 수집 API
```
POST /api/sync/run
- 수동 Fame 스캔 실행
- 인증: 운영자 권한 필요
- 응답: { success: boolean, message: string, stats: object }

GET /api/sync/logs
- Sync 로그 조회
- 인증: 운영자 권한 필요
- 응답: { logs: array, pagination: object }
```

### 3.2. 데이터 조회 API
```
GET /api/accounts
- 전체 계정 목록 조회
- 응답: { accounts: array, total: number }

GET /api/accounts/:id/eligibles
- 특정 계정의 컨텐츠 입장 가능 캐릭터 조회
- 캐싱: 10분
- 응답: { 
    accountId: string,
    characters: [
      {
        charId: string,
        name: string,
        job: string,
        fame: number,
        eligibility: {
          nabel: boolean,
          nightmare: boolean,
          goddess: boolean
        },
        slotStatus: {
          nightmareRank: number, // 1-4만 유효
          venusRank: number      // 1만 유효
        }
      }
    ]
  }
```

### 3.3. Health Check API
```
GET /api/health
- 서버 상태 확인
- DB 연결 상태 포함
- 응답: { status: "ok", database: "connected", timestamp: string }
```

---

## 4. 비즈니스 로직

### 4.1. 데이터 수집 플로우
1. **Fame 구간별 스캔**: 40k~62k, 구간폭 ≤10k
2. **페이징 처리**: 200개씩 배치 처리
3. **캐릭터 상세 조회**: `/characters/:id` API 호출
4. **Account 매핑**: accountId 기준 그룹핑
5. **DB UPSERT**: 중복 시 갱신, 신규 시 추가
6. **실패 처리**: 실패 row는 `sync_fail` 테이블에 기록

### 4.2. Eligibility 연산 로직
```javascript
// 컨텐츠별 Fame 룰 (JSON 설정)
const CONTENT_RULES = {
  nabel: { minFame: 50000 },
  nightmare: { minFame: 45000, maxSlots: 4 },
  goddess: { minFame: 40000 },
  venus: { minFame: 55000, maxSlots: 1 }
};

// 슬롯 제한 적용
function applySlotLimits(characters, contentType) {
  const rule = CONTENT_RULES[contentType];
  if (!rule.maxSlots) return characters;
  
  return characters
    .filter(char => char.fame >= rule.minFame)
    .sort((a, b) => b.fame - a.fame)
    .slice(0, rule.maxSlots);
}
```

### 4.3. 에러 처리 & 재시도
- **Axios Retry**: 지수적 백오프 (1s, 2s, 4s)
- **Circuit Breaker**: 연속 실패 시 일시 중단
- **Partial Success**: 일부 실패해도 성공 데이터는 저장

---

## 5. TDD 개발 방법론

### 5.1. 테스트 구조
```
tests/
├── unit/           # 단위 테스트
│   ├── services/
│   ├── repositories/
│   └── utils/
├── integration/    # 통합 테스트
│   ├── api/
│   └── database/
└── e2e/           # End-to-End 테스트
```

### 5.2. 테스트 실행 전략
1. **Red**: 실패하는 테스트 작성
2. **Green**: 최소한의 코드로 테스트 통과
3. **Refactor**: 코드 품질 개선
4. **Repeat**: 다음 기능으로 반복

### 5.3. Mock 전략
- **외부 API**: nock으로 Neople API 모킹
- **Database**: 테스트용 PostgreSQL 인스턴스
- **Time**: jest.useFakeTimers()로 시간 제어

---

## 6. 성능 & 보안

### 6.1. 성능 요구사항
- **API 응답시간**: < 300ms (95 percentile)
- **동시 사용자**: 50명 이상 지원
- **DB 쿼리**: 인덱스 활용으로 < 100ms
- **캐싱**: Redis 또는 메모리 캐시 (10분)

### 6.2. 보안 요구사항
- **API Key 관리**: 환경변수로만 보관
- **Rate Limiting**: IP별 분당 60회 제한
- **Input Validation**: 모든 입력값 검증
- **SQL Injection**: Parameterized Query 사용

---

## 7. 모니터링 & 로깅

### 7.1. 로깅 전략
```javascript
// 로그 레벨별 분류
logger.info('Sync started', { accountCount: 20 });
logger.warn('API rate limit approaching', { remaining: 10 });
logger.error('Database connection failed', { error: err.message });
```

### 7.2. 알림 시스템
- **Slack Webhook**: 중요 에러 즉시 알림
- **에러율 모니터링**: 5xx > 1% 시 경고
- **성능 모니터링**: 응답시간 > 1s 시 경고

---

## 8. 배포 & 운영

### 8.1. Docker 구성
```dockerfile
FROM node:20-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

### 8.2. 환경변수
```bash
# Database
DATABASE_URL=postgresql://...
DB_POOL_SIZE=10

# External API
NEOPLE_API_KEY=your_api_key
NEOPLE_API_BASE_URL=https://api.neople.co.kr

# Server
PORT=3000
NODE_ENV=production
JWT_SECRET=your_jwt_secret

# Monitoring
SLACK_WEBHOOK_URL=https://hooks.slack.com/...
```

---

## 9. 개발 마일스톤

| 주차 | 목표 | TDD 테스트 범위 |
|-----|------|----------------|
| W1  | 프로젝트 셋업 + DB 스키마 | 기본 연결 테스트 |
| W2  | 데이터 수집 API (S-1.1~1.3) | Epic E-1 전체 테스트 |
| W3  | Eligibility 연산 (S-2.1~2.3) | Epic E-2 전체 테스트 |
| W4  | REST API 구현 (S-3.1~3.2) | Epic E-3 전체 테스트 |
| W5  | 모니터링 & 배포 (S-5.1~5.2) | Epic E-5 전체 테스트 |
| W6  | 통합 테스트 & 성능 튜닝 | E2E 테스트 완료 |

---

## 10. 참고 문서
- `@TDD.mdc`: 상세 테스트 케이스 명세
- `@PRD.mdc`: 전체 프로젝트 요구사항
- `@Epic.mdc`: Epic/Story 기능 명세
